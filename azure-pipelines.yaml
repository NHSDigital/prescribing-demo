trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

pr:
  branches:
    include: ['*']

steps:
- script: sudo apt update
  displayName: 'Update OS'

- script: sudo apt install python3-setuptools
  displayName: 'Install setuptools'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.8' 
    addToPath: true

- script: pip install --user pipenv && pip install poetry
  displayName: 'Install python dependencies'

- script: ~/.local/bin/pipenv --python 3.8 && ~/.local/bin/pipenv install --dev
  displayName: Install dependencies
  workingDirectory: ./lambda

- script: ~/.local/bin/pipenv run pytest -v
  displayName: Run tests in python package
  workingDirectory: ./lambda

- bash: sh ../scripts/bundle_python.sh
  displayName: Create python deployment package
  workingDirectory: ./lambda

- script: mkdir dist
  displayName: 'create a dist folder'

- script: mkdir dist/client
  displayName: 'create a client folder'

- script: mv lambda/handler.zip dist/handler.zip
  displayName: 'move handler files into dist'
  
- script: mv client/** dist/client
  displayName: 'move client files into dist'

- script: mv main.tf dist/main.tf
  displayName: 'move main terraform file into dist'

- script: mv variables.tf dist/variables.tf
  displayName: 'move required variable file into dist'

- bash: "make build-api"
  displayName: 'build api proxy'

- bash: "make install-api-specification-dependencies"
  displayName: 'install api specification dependencies'

- bash: "make build-api-specification"
  displayName: 'build api specification'

- bash: 'echo "##vso[task.setvariable variable=SPEC_VERSION]$(cd specification && poetry run python calculate_version.py)"'
  displayName: Set SPEC_VERSION

- script: cp -R build/. dist/
  displayName: 'Copy build to dist'

- script: cp -R terraform dist
  displayName: 'Copy proxy terraform'

- publish: dist/
  artifact: eps-steel-thread-$(SPEC_VERSION)+$(Build.BuildNumber)